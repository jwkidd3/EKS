apiVersion: v1
kind: Service
metadata:
  name: userX-dashboard-service
  namespace: userX-namespace
  labels:
    app: health-dashboard
    owner: userX
spec:
  selector:
    app: health-dashboard
    owner: userX
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: userX-dashboard-ingress
  namespace: userX-namespace
  labels:
    app: health-dashboard
    owner: userX
  annotations:
    kubernetes.io/ingress.class: "aws-load-balancer"
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /health.html
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
spec:
  rules:
  - host: userX-dashboard.training.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: userX-dashboard-service
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: userX-dashboard-nodeport
  namespace: userX-namespace
  labels:
    app: health-dashboard
    owner: userX
    service-type: nodeport
spec:
  selector:
    app: health-dashboard
    owner: userX
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
    nodePort: 30080  # Note: In real scenarios, let Kubernetes assign this
  type: NodePort
---
apiVersion: v1
kind: Endpoints
metadata:
  name: userX-dashboard-service
  namespace: userX-namespace
  labels:
    app: health-dashboard
    owner: userX
spec:
  subsets:
  - addresses: []  # Will be populated automatically by service
    ports:
    - name: http
      port: 80
      protocol: TCP