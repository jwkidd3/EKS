apiVersion: apps/v1
kind: Deployment
metadata:
  name: userX-failing-readiness
  namespace: userX-namespace
  labels:
    app: failing-readiness
spec:
  replicas: 2
  selector:
    matchLabels:
      app: failing-readiness
  template:
    metadata:
      labels:
        app: failing-readiness
    spec:
      containers:
      - name: failing-readiness-app
        image: node:18-alpine
        command: ["sh", "-c"]
        args:
        - |
          cat > server.js << 'EOF'
          const http = require('http');
          let ready = true;

          // Application becomes not ready after 90 seconds
          setTimeout(() => {
            ready = false;
            console.log('Application is now not ready - will be removed from service endpoints');
          }, 90000);

          // Becomes ready again after 3 minutes
          setTimeout(() => {
            ready = true;
            console.log('Application is ready again - will be added back to service endpoints');
          }, 180000);

          const server = http.createServer((req, res) => {
            if (req.url === '/ready') {
              if (ready) {
                res.writeHead(200, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({status: 'ready', uptime: process.uptime()}));
              } else {
                // Return 503 error to fail readiness probe
                res.writeHead(503, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({status: 'not ready', uptime: process.uptime()}));
              }
            } else if (req.url === '/health') {
              // Always healthy for liveness probe
              res.writeHead(200, {'Content-Type': 'application/json'});
              res.end(JSON.stringify({status: 'healthy', uptime: process.uptime()}));
            } else {
              res.writeHead(200, {'Content-Type': 'text/html'});
              res.end(`
                <h1>userX Failing Readiness Demo</h1>
                <p>Ready Status: ${ready ? 'Ready' : 'Not Ready'}</p>
                <p>This app becomes not ready after 90 seconds, then ready again after 3 minutes</p>
                <p>Uptime: ${process.uptime().toFixed(2)} seconds</p>
                <p>Pod: ${process.env.HOSTNAME}</p>
              `);
            }
          });

          server.listen(3000, () => {
            console.log('Failing readiness app started on port 3000');
          });
          EOF
          node server.js
        ports:
        - containerPort: 3000
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"