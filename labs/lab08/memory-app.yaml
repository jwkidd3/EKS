apiVersion: apps/v1
kind: Deployment
metadata:
  name: userX-memory-app
  namespace: userX-namespace
  labels:
    app: memory-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-app
  template:
    metadata:
      labels:
        app: memory-app
    spec:
      containers:
      - name: memory-stress-app
        image: node:18-alpine
        command: ["sh", "-c"]
        args:
        - |
          cat > server.js << 'EOF'
          const http = require('http');
          let memoryStore = [];

          function memoryIntensiveTask() {
            // Allocate memory chunks
            for (let i = 0; i < 1000; i++) {
              memoryStore.push(new Array(10000).fill(Math.random()));
            }
            console.log('Memory allocated, current usage:', process.memoryUsage());

            // Keep memory for 10 seconds, then release some
            setTimeout(() => {
              memoryStore = memoryStore.slice(0, memoryStore.length / 2);
              console.log('Memory partially released');
            }, 10000);
          }

          const server = http.createServer((req, res) => {
            if (req.url === '/memory-load') {
              console.log('Memory load request received');
              memoryIntensiveTask();
              res.writeHead(200, {'Content-Type': 'application/json'});
              res.end(JSON.stringify({
                message: 'Memory load generated',
                pod: process.env.HOSTNAME,
                memoryUsage: process.memoryUsage(),
                timestamp: new Date().toISOString()
              }));
            } else if (req.url === '/health') {
              res.writeHead(200, {'Content-Type': 'application/json'});
              res.end(JSON.stringify({
                status: 'healthy',
                uptime: process.uptime(),
                memory: process.memoryUsage()
              }));
            } else if (req.url === '/gc') {
              // Force garbage collection
              if (global.gc) {
                global.gc();
                res.writeHead(200, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({
                  message: 'Garbage collection triggered',
                  memory: process.memoryUsage()
                }));
              } else {
                res.writeHead(400, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({error: 'GC not available'}));
              }
            } else {
              res.writeHead(200, {'Content-Type': 'text/html'});
              res.end(`
                <h1>userX Memory Stress Application</h1>
                <p>Pod: ${process.env.HOSTNAME}</p>
                <p>Uptime: ${process.uptime().toFixed(2)} seconds</p>
                <p>Memory Usage: ${JSON.stringify(process.memoryUsage(), null, 2)}</p>
                <hr>
                <h3>Endpoints:</h3>
                <ul>
                  <li><a href="/memory-load">Generate Memory Load</a></li>
                  <li><a href="/health">Health Check</a></li>
                  <li><a href="/gc">Force Garbage Collection</a></li>
                </ul>
              `);
            }
          });

          server.listen(3000, () => {
            console.log('Memory stress app running on port 3000');
          });
          EOF
          node --expose-gc server.js
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10