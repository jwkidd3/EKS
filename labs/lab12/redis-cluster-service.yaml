apiVersion: v1
kind: Service
metadata:
  name: userX-redis-cluster-service
  namespace: userX-namespace
  labels:
    app: redis-cluster
    owner: userX
spec:
  clusterIP: None  # Headless service for StatefulSet
  selector:
    app: redis-cluster
    owner: userX
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 16379
    targetPort: 16379
    name: cluster
---
apiVersion: v1
kind: Service
metadata:
  name: userX-redis-cluster-lb
  namespace: userX-namespace
  labels:
    app: redis-cluster
    owner: userX
    service-type: loadbalancer
spec:
  selector:
    app: redis-cluster
    owner: userX
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: userX-redis-cluster-read
  namespace: userX-namespace
  labels:
    app: redis-cluster
    owner: userX
    service-type: read-only
spec:
  selector:
    app: redis-cluster
    owner: userX
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP
  sessionAffinity: ClientIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userX-redis-client
  namespace: userX-namespace
  labels:
    app: redis-client
    owner: userX
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-client
      owner: userX
  template:
    metadata:
      labels:
        app: redis-client
        owner: userX
    spec:
      containers:
      - name: redis-client
        image: redis:7-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Starting Redis client for userX cluster..."

          # Function to test Redis operations
          test_redis() {
            local host=$1
            echo "Testing Redis at $host..."

            # Basic operations
            redis-cli -h $host set userX:test:key "Hello from userX" || echo "Set failed"
            redis-cli -h $host get userX:test:key || echo "Get failed"

            # Hash operations
            redis-cli -h $host hset userX:user:1 name "User1" email "user1@example.com" || echo "Hset failed"
            redis-cli -h $host hgetall userX:user:1 || echo "Hgetall failed"

            # List operations
            redis-cli -h $host lpush userX:logs "Log entry 1" "Log entry 2" || echo "Lpush failed"
            redis-cli -h $host lrange userX:logs 0 -1 || echo "Lrange failed"

            echo "Test completed for $host"
          }

          # Test different service endpoints
          echo "Testing Redis cluster services..."

          while true; do
            echo "$(date): Running Redis cluster tests..."

            # Test individual cluster nodes
            for i in 0 1 2; do
              test_redis "userX-redis-cluster-$i.userX-redis-cluster-service"
            done

            # Test load balancer service
            test_redis "userX-redis-cluster-lb"

            # Show cluster status
            echo "Cluster status:"
            redis-cli -h userX-redis-cluster-0.userX-redis-cluster-service cluster nodes || echo "Cluster status failed"

            echo "Sleeping for 60 seconds..."
            sleep 60
          done
        env:
        - name: USER_PREFIX
          value: "userX"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: userX-redis-cluster-monitor
  namespace: userX-namespace
  labels:
    app: redis-cluster
    owner: userX
spec:
  selector:
    matchLabels:
      app: redis-cluster
      owner: userX
  endpoints:
  - port: redis
    interval: 30s
    path: /metrics
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: userX-redis-cluster-policy
  namespace: userX-namespace
  labels:
    app: redis-cluster
    owner: userX
spec:
  podSelector:
    matchLabels:
      app: redis-cluster
      owner: userX
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: redis-client
          owner: userX
    - podSelector:
        matchLabels:
          app: redis-cluster
          owner: userX
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis-cluster
          owner: userX
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379
  - to: []  # Allow DNS resolution
    ports:
    - protocol: UDP
      port: 53